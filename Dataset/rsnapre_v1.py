# -*- coding: utf-8 -*-
"""rsnaPre_v1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FhfCgMIPj9keazzDyI_ZNCXjULjKONkV
"""

import torch
import torchio as tio
import pytorch_lightning as pl
from torch.utils.data import random_split, DataLoader, Dataset

class RSNAPre(pl.LightningDataModule):
  def __init__(self, data_dir, batch_size:int=8):
    super().__init__()
    self.data_dir = data_dir
    self.batch_size = batch_size

    spatial_transforms = {
        tio.RandomElasticDeformation(): 0.2,
        tio.RandomMotion(): 0.2,}

    self.transform = tio.Compose([tio.OneOf(spatial_transforms, p=0.5),
                                  tio.transforms.Resize((64, 64, 100)),
                                  tio.transforms.ZNormalization(),])

  def setup(self):

    train_set = tio.datasets.RSNAMICCAI(self.data_dir, train=True, transform=self.transform)

    # Training mode: 90/10% split
    split_ratio = 0.9
    n_train_set = int(len(train_set) * 0.9)
    n_val_set = len(train_set) - n_train_set

    self.train_set, self.val_set = random_split(train_set,
                                                [n_train_set, n_val_set],
                                                generator=torch.Generator().manual_seed(1))
    
  def datasets(self):
    return self.train_set, self.val_set
    
  def train_dataloader(self):
    return DataLoader(self.train_set, batch_size=self.batch_size, shuffle=True)

  def val_dataloader(self):
    return DataLoader(self.val_set, batch_size=self.batch_size, shuffle=False)

# call main
if __name__ == '__main__':
  dataset = RSNAPre(data_dir='/content/drive/MyDrive/Data/rsna_preprocessed')
  dataset.setup()
  train_set, val_set = dataset.datasets()
  train_loader = dataset.train_dataloader()
  val_loader = dataset.val_dataloader()
  print(train_loader.dataset[0])
  print(val_loader.dataset[0])